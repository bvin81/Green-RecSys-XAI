/**
 * recipe-search.js
 * Recept keres√©si logika a Recept Kutat√°si Rendszerhez
 * Verzi√≥: 2025.06.20
 */

import CONFIG from './config.js';
import { shuffleArray, countCommonElements } from '../utils/helpers.js';

/**
 * Receptek keres√©se a megadott hozz√°val√≥k alapj√°n
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @param {string} ingredientsQuery - Keres√©si kifejez√©s (hozz√°val√≥k)
 * @param {string} testGroup - Teszt csoport (A, B, C)
 * @returns {Array} Tal√°lati receptek
 */
export function searchRecipes(recipes, ingredientsQuery, testGroup) {
    console.log('üîç Keres√©s:', ingredientsQuery);
    console.log('üë• Teszt csoport:', testGroup);
    
    if (!recipes || !recipes.length || !ingredientsQuery) {
        console.warn('‚ö†Ô∏è √úres recept lista vagy keres√©s!');
        return [];
    }
    
    // 1. Keres√©si kifejez√©s feldolgoz√°sa
    const searchTerms = ingredientsQuery.toLowerCase()
        .split(/[,\s]+/)
        .filter(term => term.length >= 2);
    
    if (searchTerms.length === 0) {
        console.warn('‚ö†Ô∏è Nincs √©rv√©nyes keres√©si kifejez√©s!');
        return [];
    }
    
    console.log('üîé Keresett hozz√°val√≥k:', searchTerms.join(', '));
    
    // 2. Hozz√°val√≥ egyez√©sek keres√©se
    const matchResults = findMatchingRecipes(recipes, searchTerms);
    
    // 3. Tal√°latok rendez√©se teszt csoport szerint
    const sortedResults = applySortingStrategy(matchResults, testGroup);
    
    // 4. Tal√°latok korl√°toz√°sa a konfigur√°lt maximumra
    const finalResults = sortedResults.slice(0, CONFIG.SEARCH.MAX_RESULTS);
    
    console.log('üìã V√©gs≈ë eredm√©nyek:', finalResults.length, 'recept');
    
    // Debug: fenntarthat√≥s√°g ellen≈ërz√©se
    finalResults.forEach((recipe, idx) => {
        console.log(`   ${idx+1}. ${recipe.name?.substring(0, 25)} - Fenntarthat√≥s√°g: ${recipe.sustainability_index.toFixed(1)} (env: ${recipe.env_score}, nutri: ${recipe.nutri_score})`);
    });
    
    return finalResults;
}

/**
 * Hozz√°val√≥ egyez√©sek keres√©se
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @param {Array} searchTerms - Keres√©si kifejez√©sek
 * @returns {Array} Tal√°lati receptek
 */
function findMatchingRecipes(recipes, searchTerms) {
    // El≈ësz√∂r pontos egyez√©sek keres√©se
    let exactMatches = recipes.filter(recipe => {
        const ingredients = (recipe.ingredients || '').toLowerCase();
        return searchTerms.some(term => ingredients.includes(term));
    });
    
    console.log('üîç Pontos egyez√©sek:', exactMatches.length);
    
    // Ha kev√©s a tal√°lat, pr√≥b√°ljunk t√°gabb egyez√©seket tal√°lni
    if (exactMatches.length < 4 && searchTerms.length > 0) {
        const fuzzyMatches = recipes.filter(recipe => {
            if (exactMatches.some(existing => existing.recipeid === recipe.recipeid)) {
                return false; // Kihagyjuk a m√°r megtal√°lt recepteket
            }
            
            const ingredients = (recipe.ingredients || '').toLowerCase();
            const words = ingredients.split(/[,\s]+/);
            
            // R√©szleges egyez√©s (szavak kezdete)
            return searchTerms.some(term => 
                words.some(word => word.startsWith(term))
            );
        });
        
        exactMatches = [...exactMatches, ...fuzzyMatches.slice(0, 5)];
        console.log('üîç R√©szleges egyez√©sek hozz√°adva:', exactMatches.length);
    }
    
    // Ha m√©g mindig kev√©s tal√°lat, legjobb receptek hozz√°ad√°sa
    if (exactMatches.length < 5 && CONFIG.SEARCH.INCLUDE_TOP_SUSTAINABLE) {
        const topRecipes = recipes
            .filter(recipe => !exactMatches.some(existing => existing.recipeid === recipe.recipeid))
            .sort((a, b) => (b.sustainability_index || 0) - (a.sustainability_index || 0))
            .slice(0, 5 - exactMatches.length);
        
        exactMatches = [...exactMatches, ...topRecipes];
        console.log('‚≠ê Legjobb receptekkel kieg√©sz√≠tve:', exactMatches.length);
    }
    
    return exactMatches;
}

/**
 * Teszt csoport alap√∫ rendez√©si strat√©gia alkalmaz√°sa
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @param {string} testGroup - Teszt csoport (A, B, C)
 * @returns {Array} Rendezett receptek
 */
function applySortingStrategy(recipes, testGroup) {
    switch (testGroup) {
        case 'A':
            // Kontroll csoport: v√©letlenszer≈± sorrend
            console.log('üé≤ A csoport: v√©letlenszer≈± rendez√©s');
            return shuffleArray([...recipes]);
            
        case 'B':
        case 'C':
            // Kiegyens√∫lyozott fenntarthat√≥s√°gi √©s kedvelts√©gi rendez√©s
            console.log('üå± B/C csoport: kiegyens√∫lyozott rendez√©s');
            return balancedSorting(recipes);
            
        default:
            return recipes;
    }
}

/**
 * Kiegyens√∫lyozott rendez√©s (50% fenntarthat√≥s√°g, 50% n√©pszer≈±s√©g)
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @returns {Array} Rendezett receptek
 */
function balancedSorting(recipes) {
    // K√©t rendez√©si szempont szerint k√ºl√∂n-k√ºl√∂n rendezz√ºk a recepteket
    const sustainabilityRanked = [...recipes].sort((a, b) => 
        (b.sustainability_index || 0) - (a.sustainability_index || 0));
    
    const popularityRanked = [...recipes].sort((a, b) => 
        (b.aggregated_rating || 0) - (a.aggregated_rating || 0));
    
    // Ha nincs √©rt√©kel√©s, haszn√°ljuk a meal_score-t
    if (!recipes.some(r => r.aggregated_rating)) {
        popularityRanked.sort((a, b) => 
            (b.meal_score || 0) - (a.meal_score || 0));
    }
    
    // V√°ltakozva v√°lasztunk a k√©t rendezett list√°b√≥l
    const result = [];
    const maxResults = Math.min(CONFIG.SEARCH.MAX_RESULTS * 2, recipes.length);
    
    for (let i = 0; i < maxResults; i++) {
        const sourceIndex = Math.floor(i / 2);
        
        if (i % 2 === 0 && sustainabilityRanked[sourceIndex]) {
            // M√©g nem adtuk hozz√° ezt a receptet?
            if (!result.some(r => r.recipeid === sustainabilityRanked[sourceIndex].recipeid)) {
                result.push(sustainabilityRanked[sourceIndex]);
            }
        } else if (popularityRanked[sourceIndex]) {
            // M√©g nem adtuk hozz√° ezt a receptet?
            if (!result.some(r => r.recipeid === popularityRanked[sourceIndex].recipeid)) {
                result.push(popularityRanked[sourceIndex]);
            }
        }
    }
    
    return result.slice(0, CONFIG.SEARCH.MAX_RESULTS);
}

/**
 * Recept relevancia alapj√°n t√∂rt√©n≈ë rendez√©se
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @param {Array} searchTerms - Keres√©si kifejez√©sek
 * @returns {Array} Rendezett receptek
 */
export function sortRecipesByRelevance(recipes, searchTerms) {
    const terms = searchTerms.toLowerCase().split(/[,\s]+/).filter(term => term.length >= 2);
    
    if (terms.length === 0) return recipes;
    
    return [...recipes].sort((a, b) => {
        const aIngredients = (a.ingredients || '').toLowerCase().split(/[,\s]+/);
        const bIngredients = (b.ingredients || '').toLowerCase().split(/[,\s]+/);
        
        const aMatches = countCommonElements(aIngredients, terms);
        const bMatches = countCommonElements(bIngredients, terms);
        
        return bMatches - aMatches;
    });
}
