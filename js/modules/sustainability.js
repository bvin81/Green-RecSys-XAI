/**
 * sustainability.js
 * Fenntarthat√≥s√°gi sz√°m√≠t√°sok √©s √©rt√©kel√©sek
 * Verzi√≥: 2025.06.20
 */

import CONFIG from './config.js';

/**
 * Fenntarthat√≥s√°gi pontsz√°m sz√°m√≠t√°sa
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100, magasabb = rosszabb)
 * @param {number} nutriScore - T√°pl√°lkoz√°si pontsz√°m (0-100, magasabb = jobb)
 * @param {string} category - √âtel kateg√≥ria
 * @returns {number} Fenntarthat√≥s√°gi index (0-100)
 */
export function calculateSustainabilityScore(envScore, nutriScore, category = 'egy√©b') {
    // Input valid√°ci√≥
    if (typeof envScore !== 'number' || typeof nutriScore !== 'number') {
        console.warn('‚ö†Ô∏è Hib√°s pontsz√°m t√≠pusok:', { envScore, nutriScore });
        return 50; // Alap√©rtelmezett k√∂zepesen fenntarthat√≥
    }
    
    // Normaliz√°l√°s 0-100 tartom√°nyra
    const normalizedEnvScore = Math.max(0, Math.min(100, envScore));
    const normalizedNutriScore = Math.max(0, Math.min(100, nutriScore));
    
    // K√∂rnyezeti komponens: ford√≠tott sk√°la (100 - envScore)
    const environmentalComponent = 100 - normalizedEnvScore;
    
    // T√°pl√°lkoz√°si komponens: direkt sk√°la
    const nutritionalComponent = normalizedNutriScore;
    
    // S√∫lyozott √°tlag: 60% k√∂rnyezeti, 40% t√°pl√°lkoz√°si
    const weightedScore = (environmentalComponent * 0.6) + (nutritionalComponent * 0.4);
    
    // Kateg√≥ria m√≥dos√≠t√≥
    const categoryModifier = getCategoryModifier(category);
    
    // V√©gs≈ë pontsz√°m sz√°m√≠t√°sa
    const finalScore = Math.max(0, Math.min(100, weightedScore + categoryModifier));
    
    return Math.round(finalScore * 10) / 10; // Egy tizedesjegy pontoss√°g
}

/**
 * Kateg√≥ria m√≥dos√≠t√≥ lek√©r√©se
 * 
 * @param {string} category - √âtel kateg√≥ria
 * @returns {number} M√≥dos√≠t√≥ √©rt√©k (-10 - +10)
 */
function getCategoryModifier(category) {
    const modifiers = CONFIG.SUSTAINABILITY?.CATEGORY_MODIFIERS || {
        'sal√°ta': 5,      // N√∂v√©nyi alap√∫ √©telek b√≥nusza
        'leves': 3,       // √Åltal√°ban kevesebb h√∫s
        'f≈ë√©tel': 0,      // Semleges
        'desszert': -2,   // √Åltal√°ban cukor/tejterm√©kek
        'ital': 2,        // Folyad√©k, kevesebb er≈ëforr√°s
        'reggeli': 1,     // V√°ltoz√≥, de √°ltal√°ban k√∂nnyebb
        'k√∂ret': 2,       // √Åltal√°ban n√∂v√©nyi
        'egy√©b': 0        // Semleges
    };
    
    return modifiers[category] || 0;
}

/**
 * Kateg√≥ria meghat√°roz√°sa hozz√°val√≥k alapj√°n
 * 
 * @param {string} ingredients - Hozz√°val√≥k string
 * @param {string} name - Recept neve
 * @returns {string} Kateg√≥ria
 */
export function determineCategory(ingredients, name = '') {
    if (!ingredients && !name) {
        return 'egy√©b';
    }
    
    const text = `${ingredients} ${name}`.toLowerCase();
    
    // Kateg√≥ria kulcsszavak
    const categoryKeywords = {
        'sal√°ta': ['sal√°ta', 'uborka', 'paradicsom', 'fejes', 'sal√°t', 'retek', 'paprika'],
        'leves': ['leves', 'h√∫sleves', 'z√∂lds√©gleves', 'kr√©mleves', 'bors√≥leves', 'guly√°s'],
        'f≈ë√©tel': ['h√∫s', 'csirke', 'marha', 'sert√©s', 'hal', 'schnitzel', 'p√∂rk√∂lt', 'ragu', 'pizza'],
        'desszert': ['torta', 's√ºtem√©ny', 'fagylalt', 'pudding', 'keksz', 'csoki', 'csokol√°d√©', 'kr√©mes'],
        'ital': ['smoothie', 'tea', 'k√°v√©', 'juice', 'l√©', 'ital', 'shake'],
        'reggeli': ['reggeli', 'toj√°s', 'omlett', 'pir√≠t√≥s', 'm√ºzli', 'zabk√°sa', 'pancake'],
        'k√∂ret': ['k√∂ret', 'rizs', 't√©szta', 'burgonya', 'krumpli', 'nokedli', 'galuska']
    };
    
    // Pontsz√°m alap√∫ kategoriz√°l√°s
    let maxScore = 0;
    let detectedCategory = 'egy√©b';
    
    for (const [category, keywords] of Object.entries(categoryKeywords)) {
        let score = 0;
        keywords.forEach(keyword => {
            if (text.includes(keyword)) {
                score += keyword.length; // Hosszabb kulcsszavak nagyobb s√∫lyt kapnak
            }
        });
        
        if (score > maxScore) {
            maxScore = score;
            detectedCategory = category;
        }
    }
    
    return detectedCategory;
}

/**
 * Kateg√≥ria ikon lek√©r√©se
 * 
 * @param {string} category - Kateg√≥ria
 * @returns {string} Emoji ikon
 */
export function getCategoryIcon(category) {
    return CONFIG.CATEGORY_ICONS[category] || CONFIG.CATEGORY_ICONS['egy√©b'];
}

/**
 * K√∂rnyezeti pontsz√°m sz√≠nk√≥dja
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100)
 * @returns {string} CSS sz√≠n
 */
export function getEnvironmentalColor(envScore) {
    if (typeof envScore !== 'number') {
        return '#666666'; // Sz√ºrke az ismeretlen √©rt√©kekhez
    }
    
    // Sk√°la: 0 = legjobb (z√∂ld), 100 = legrosszabb (piros)
    if (envScore <= 20) return '#22c55e';  // Z√∂ld
    if (envScore <= 40) return '#84cc16';  // Vil√°gosz√∂ld
    if (envScore <= 60) return '#eab308';  // S√°rga
    if (envScore <= 80) return '#f97316';  // Narancs
    return '#ef4444';                      // Piros
}

/**
 * K√∂rnyezeti pontsz√°m c√≠mk√©je
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100)
 * @returns {string} Le√≠r√≥ c√≠mke
 */
export function getEnvironmentalLabel(envScore) {
    if (typeof envScore !== 'number') {
        return 'Ismeretlen';
    }
    
    if (envScore <= 20) return 'Kiv√°l√≥';
    if (envScore <= 40) return 'J√≥';
    if (envScore <= 60) return 'K√∂zepes';
    if (envScore <= 80) return 'Gyenge';
    return 'Rossz';
}

/**
 * Fenntarthat√≥s√°gi pontsz√°m √©rt√©kel√©se
 * 
 * @param {number} sustainabilityIndex - Fenntarthat√≥s√°gi index (0-100)
 * @returns {Object} √ârt√©kel√©si objektum
 */
export function evaluateSustainabilityScore(sustainabilityIndex) {
    if (typeof sustainabilityIndex !== 'number') {
        return {
            label: 'Ismeretlen',
            icon: '‚ùì',
            color: '#666666',
            description: 'Nem siker√ºlt √©rt√©kelni a fenntarthat√≥s√°got'
        };
    }
    
    const ranges = CONFIG.SUSTAINABILITY?.SCORE_RANGES || [
        { min: 90, label: 'Kiv√°l√≥', icon: '‚ú®', color: '#22c55e' },
        { min: 80, label: 'Kiv√°l√≥', icon: '‚ú®', color: '#22c55e' },
        { min: 70, label: 'Nagyon j√≥', icon: 'üåø', color: '#84cc16' },
        { min: 60, label: 'J√≥', icon: 'üëç', color: '#65a30d' },
        { min: 50, label: 'Megfelel≈ë', icon: 'üÜó', color: '#eab308' },
        { min: 40, label: 'K√∂zepes', icon: '‚ö†Ô∏è', color: '#f59e0b' },
        { min: 30, label: 'Gyenge', icon: 'üìâ', color: '#f97316' },
        { min: 0, label: 'Rossz', icon: '‚ö†Ô∏è', color: '#ef4444' }
    ];
    
    const evaluation = ranges.find(range => sustainabilityIndex >= range.min) || ranges[ranges.length - 1];
    
    return {
        ...evaluation,
        description: getScoreDescription(sustainabilityIndex)
    };
}

/**
 * Pontsz√°m r√©szletes le√≠r√°sa
 * 
 * @param {number} score - Pontsz√°m (0-100)
 * @returns {string} Le√≠r√°s
 */
function getScoreDescription(score) {
    if (score >= 80) {
        return 'Ez egy k√∂rnyezetbar√°t v√°laszt√°s, alacsony √∂kol√≥giai l√°bnyommal √©s j√≥ t√°pl√°lkoz√°si √©rt√©kkel.';
    } else if (score >= 60) {
        return 'J√≥ v√°laszt√°s a fenntarthat√≥s√°g szempontj√°b√≥l, kisebb jav√≠t√°si lehet≈ës√©gekkel.';
    } else if (score >= 40) {
        return 'K√∂zepes fenntarthat√≥s√°g√∫ √©tel, √©rdemes megfontolni alternat√≠v√°kat.';
    } else {
        return 'Ez az √©tel jelent≈ës k√∂rnyezeti hat√°ssal b√≠r, fontolja meg a fenntarthat√≥bb alternat√≠v√°kat.';
    }
}

/**
 * Hozz√°val√≥k k√∂rnyezeti hat√°s√°nak elemz√©se
 * 
 * @param {string} ingredients - Hozz√°val√≥k string
 * @returns {Object} K√∂rnyezeti hat√°s elemz√©s
 */
export function analyzeEnvironmentalImpact(ingredients) {
    if (!ingredients || typeof ingredients !== 'string') {
        return {
            totalImpact: 50,
            highImpactIngredients: [],
            lowImpactIngredients: [],
            recommendations: []
        };
    }
    
    const ingredientList = ingredients.toLowerCase()
        .replace(/[c\(\)"']/g, '')
        .split(/[,\s]+/)
        .filter(item => item.length > 2);
    
    // K√∂rnyezeti hat√°s kateg√≥ri√°k
    const impactCategories = {
        high: {
            keywords: ['marha', 'marhah√∫s', 'borj√∫', 'b√°r√°ny', 'sert√©s', 'szalonna', 'bacon', 'vaj', 'tejsz√≠n', 'sajt'],
            impact: 80,
            recommendations: ['Pr√≥b√°ljon n√∂v√©nyi alternat√≠v√°kat', 'Cs√∂kkentse a h√∫smennyis√©get']
        },
        medium: {
            keywords: ['csirke', 'ty√∫k', 'toj√°s', 'hal', 'tej', 'joghurt', 'tejf√∂l'],
            impact: 50,
            recommendations: ['V√°lasszon bio vagy helyi term√©keket', 'M√©rs√©kelje a fogyaszt√°st']
        },
        low: {
            keywords: ['z√∂lds√©g', 'gy√ºm√∂lcs', 'rizs', 't√©szta', 'bab', 'lencse', 'quinoa', 'zab', 'alma', 'paradicsom', 'spen√≥t'],
            impact: 20,
            recommendations: ['Kiv√°l√≥ v√°laszt√°s!', 'T√°mogassa a helyi termel≈ëket']
        }
    };
    
    let totalImpact = 50;
    const highImpactIngredients = [];
    const lowImpactIngredients = [];
    const recommendations = [];
    
    let impactSum = 0;
    let ingredientCount = 0;
    
    ingredientList.forEach(ingredient => {
        let classified = false;
        
        for (const [category, data] of Object.entries(impactCategories)) {
            if (data.keywords.some(keyword => ingredient.includes(keyword))) {
                impactSum += data.impact;
                ingredientCount++;
                classified = true;
                
                if (category === 'high') {
                    highImpactIngredients.push(ingredient);
                } else if (category === 'low') {
                    lowImpactIngredients.push(ingredient);
                }
                
                recommendations.push(...data.recommendations);
                break;
            }
        }
        
        // Ha nincs kategoriz√°lva, k√∂zepes hat√°sk√©nt sz√°molunk
        if (!classified) {
            impactSum += 40;
            ingredientCount++;
        }
    });
    
    if (ingredientCount > 0) {
        totalImpact = Math.round(impactSum / ingredientCount);
    }
    
    // Duplik√°tumok elt√°vol√≠t√°sa a javaslatokb√≥l
    const uniqueRecommendations = [...new Set(recommendations)];
    
    return {
        totalImpact,
        highImpactIngredients,
        lowImpactIngredients,
        recommendations: uniqueRecommendations
    };
}

/**
 * T√°pl√°lkoz√°si √©rt√©k sz√°m√≠t√°sa hozz√°val√≥k alapj√°n
 * 
 * @param {string} ingredients - Hozz√°val√≥k string
 * @returns {number} Becs√ºlt t√°pl√°lkoz√°si pontsz√°m (0-100)
 */
export function estimateNutritionalValue(ingredients) {
    if (!ingredients || typeof ingredients !== 'string') {
        return 50;
    }
    
    const ingredientList = ingredients.toLowerCase()
        .replace(/[c\(\)"']/g, '')
        .split(/[,\s]+/)
        .filter(item => item.length > 2);
    
    // T√°pl√°lkoz√°si √©rt√©k kateg√≥ri√°k
    const nutritionCategories = {
        excellent: {
            keywords: ['spen√≥t', 'brokkoli', 'quinoa', 'lencse', 'avok√°d√≥', 'di√≥', 'mandula', 'hal', '√°fonya'],
            score: 90
        },
        good: {
            keywords: ['z√∂lds√©g', 'gy√ºm√∂lcs', 'teljes', 'barna', 'zabpehely', 'csirke', 'toj√°s', 'joghurt'],
            score: 75
        },
        moderate: {
            keywords: ['rizs', 't√©szta', 'burgonya', 'keny√©r', 'tej', 'sajt'],
            score: 60
        },
        poor: {
            keywords: ['cukor', 'zs√≠r', 'olaj', 'vaj', 'szalonna', 'bacon', 'chips', '√©dess√©g'],
            score: 30
        }
    };
    
    let totalScore = 0;
    let ingredientCount = 0;
    
    ingredientList.forEach(ingredient => {
        let scored = false;
        
        for (const [category, data] of Object.entries(nutritionCategories)) {
            if (data.keywords.some(keyword => ingredient.includes(keyword))) {
                totalScore += data.score;
                ingredientCount++;
                scored = true;
                break;
            }
        }
        
        // Ha nincs kategoriz√°lva, k√∂zepes √©rt√©kk√©nt sz√°molunk
        if (!scored) {
            totalScore += 50;
            ingredientCount++;
        }
    });
    
    return ingredientCount > 0 ? Math.round(totalScore / ingredientCount) : 50;
}

/**
 * Fenntarthat√≥s√°g jav√≠t√°si javaslatok
 * 
 * @param {Object} recipe - Recept objektum
 * @returns {Array} Jav√≠t√°si javaslatok
 */
export function getSustainabilityRecommendations(recipe) {
    const recommendations = [];
    
    if (!recipe) {
        return recommendations;
    }
    
    const sustainability = recipe.sustainability_index || 0;
    const envScore = recipe.env_score || 0;
    const nutriScore = recipe.nutri_score || 0;
    
    // K√∂rnyezeti jav√≠t√°sok
    if (envScore > 60) {
        recommendations.push({
            type: 'environmental',
            priority: 'high',
            message: 'Cser√©lje le a magas k√∂rnyezeti hat√°s√∫ hozz√°val√≥kat n√∂v√©nyi alternat√≠v√°kra',
            impact: '+15-25 pont'
        });
    }
    
    // T√°pl√°lkoz√°si jav√≠t√°sok
    if (nutriScore < 60) {
        recommendations.push({
            type: 'nutritional',
            priority: 'medium',
            message: 'Adjon hozz√° t√∂bb z√∂lds√©get vagy teljes ki≈ërl√©s≈± gabon√°t',
            impact: '+10-20 pont'
        });
    }
    
    // √Åltal√°nos javaslatok
    if (sustainability < 70) {
        recommendations.push({
            type: 'general',
            priority: 'low',
            message: 'V√°lasszon helyi √©s szezon√°lis alapanyagokat',
            impact: '+5-10 pont'
        });
    }
    
    return recommendations;
}

/**
 * Szezonalit√°s ellen≈ërz√©se
 * 
 * @param {string} ingredients - Hozz√°val√≥k
 * @param {number} month - H√≥nap (1-12)
 * @returns {Object} Szezonalit√°s inform√°ci√≥
 */
export function checkSeasonality(ingredients, month = new Date().getMonth() + 1) {
    const seasonalIngredients = {
        spring: [3, 4, 5], // m√°rcius-m√°jus
        summer: [6, 7, 8], // j√∫nius-augusztus
        autumn: [9, 10, 11], // szeptember-november
        winter: [12, 1, 2]  // december-febru√°r
    };
    
    const seasonalFoods = {
        spring: ['sp√°rga', 'retek', 'sal√°ta', 'spen√≥t', '√∫jhagyma'],
        summer: ['paradicsom', 'paprika', 'uborka', 'cukkini', 'barack', 'szilva'],
        autumn: ['t√∂k', 'k√°poszta', 'alma', 'k√∂rte', 'sz≈ël≈ë', 'di√≥'],
        winter: ['kelbimb√≥', 'karfiol', 'r√©pa', 'krumpli', 'citrus']
    };
    
    let currentSeason = 'spring';
    for (const [season, months] of Object.entries(seasonalIngredients)) {
        if (months.includes(month)) {
            currentSeason = season;
            break;
        }
    }
    
    const ingredientList = ingredients.toLowerCase().split(/[,\s]+/);
    const seasonalMatches = seasonalFoods[currentSeason].filter(food => 
        ingredientList.some(ingredient => ingredient.includes(food))
    );
    
    return {
        season: currentSeason,
        seasonalIngredients: seasonalMatches,
        seasonalityScore: seasonalMatches.length > 0 ? Math.min(100, seasonalMatches.length * 20) : 0,
        recommendations: seasonalMatches.length === 0 ? 
            [`Pr√≥b√°ljon ${currentSeason} szezon√∫ alapanyagokat haszn√°lni`] : []
    };
}
