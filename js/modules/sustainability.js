/**
 * sustainability.js
 * Fenntarthat√≥s√°gi sz√°m√≠t√°sok √©s √©rt√©kel√©sek
 * Verzi√≥: 2025.06.20
 */

import CONFIG from './config.js';

/**
 * Fenntarthat√≥s√°gi pontsz√°m sz√°m√≠t√°sa
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100, magasabb = rosszabb)
 * @param {number} nutriScore - T√°pl√°lkoz√°si pontsz√°m (0-100, magasabb = jobb)
 * @param {string} category - √âtel kateg√≥ria
 * @returns {number} Fenntarthat√≥s√°gi index (0-100)
 */
export function calculateSustainabilityScore(envScore, nutriScore, category = 'egy√©b') {
    // Input valid√°ci√≥
    if (typeof envScore !== 'number' || typeof nutriScore !== 'number') {
        console.warn('‚ö†Ô∏è Hib√°s pontsz√°m t√≠pusok:', { envScore, nutriScore });
        return 50; // Alap√©rtelmezett k√∂zepesen fenntarthat√≥
    }
    
    // Normaliz√°l√°s 0-100 tartom√°nyra
    const normalizedEnvScore = Math.max(0, Math.min(100, envScore));
    const normalizedNutriScore = Math.max(0, Math.min(100, nutriScore));
    
    // K√∂rnyezeti komponens: ford√≠tott sk√°la (100 - envScore)
    const environmentalComponent = 100 - normalizedEnvScore;
    
    // T√°pl√°lkoz√°si komponens: direkt sk√°la
    const nutritionalComponent = normalizedNutriScore;
    
    // S√∫lyozott √°tlag: 60% k√∂rnyezeti, 40% t√°pl√°lkoz√°si
    const weightedScore = (environmentalComponent * 0.6) + (nutritionalComponent * 0.4);
    
    // Kateg√≥ria m√≥dos√≠t√≥
    const categoryModifier = getCategoryModifier(category);
    
    // V√©gs≈ë pontsz√°m sz√°m√≠t√°sa
    const finalScore = Math.max(0, Math.min(100, weightedScore + categoryModifier));
    
    return Math.round(finalScore * 10) / 10; // Egy tizedesjegy pontoss√°g
}

/**
 * Kateg√≥ria m√≥dos√≠t√≥ lek√©r√©se
 * 
 * @param {string} category - √âtel kateg√≥ria
 * @returns {number} M√≥dos√≠t√≥ √©rt√©k (-10 - +10)
 */
function getCategoryModifier(category) {
    const modifiers = CONFIG.SUSTAINABILITY?.CATEGORY_MODIFIERS || {
        'sal√°ta': 5,      // Sal√°t√°knak b√≥nusz
        'leves': 3,       // Leveseknek kis b√≥nusz
        'f≈ë√©tel': 0,      // F≈ë√©teleknek semleges
        'desszert': -2,   // Desszerteknek kis levon√°s
        'ital': 2,        // Italoknak kis b√≥nusz
        'reggeli': 1,     // Reggeliknek kis b√≥nusz
        'k√∂ret': 2,       // K√∂reteknek kis b√≥nusz
        'egy√©b': 0        // Egy√©b √©teleknek semleges
    };
    
    return modifiers[category] || 0;
}

/**
 * K√∂rnyezeti hat√°s sz√≠n√©nek meghat√°roz√°sa
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100)
 * @returns {string} CSS sz√≠n
 */
export function getEnvironmentalColor(envScore) {
    if (typeof envScore !== 'number') {
        return '#666666'; // Sz√ºrke ismeretlen √©rt√©kekhez
    }
    
    // K√∂rnyezeti pontsz√°m: magasabb = rosszabb
    if (envScore <= 20) {
        return '#22c55e'; // Z√∂ld - nagyon j√≥
    } else if (envScore <= 40) {
        return '#84cc16'; // Vil√°gosz√∂ld - j√≥
    } else if (envScore <= 60) {
        return '#eab308'; // S√°rga - k√∂zepes
    } else if (envScore <= 80) {
        return '#f97316'; // Narancs - rossz
    } else {
        return '#ef4444'; // Piros - nagyon rossz
    }
}

/**
 * K√∂rnyezeti hat√°s c√≠mk√©j√©nek meghat√°roz√°sa
 * 
 * @param {number} envScore - K√∂rnyezeti pontsz√°m (0-100)
 * @returns {string} Le√≠r√≥ c√≠mke
 */
export function getEnvironmentalLabel(envScore) {
    if (typeof envScore !== 'number') {
        return 'Ismeretlen';
    }
    
    if (envScore <= 20) {
        return 'Kiv√°l√≥';
    } else if (envScore <= 40) {
        return 'J√≥';
    } else if (envScore <= 60) {
        return 'K√∂zepes';
    } else if (envScore <= 80) {
        return 'Rossz';
    } else {
        return 'Nagyon rossz';
    }
}

/**
 * Fenntarthat√≥s√°gi pontsz√°m √©rt√©kel√©se
 * 
 * @param {number} sustainabilityIndex - Fenntarthat√≥s√°gi index (0-100)
 * @returns {Object} √ârt√©kel√©s objektum (label, icon, color, category)
 */
export function evaluateSustainabilityScore(sustainabilityIndex) {
    if (typeof sustainabilityIndex !== 'number') {
        return {
            label: 'Ismeretlen',
            icon: '‚ùì',
            color: '#666666',
            category: 'unknown'
        };
    }
    
    const categories = CONFIG.SUSTAINABILITY?.SCORE_CATEGORIES || [
        { min: 90, label: 'Kiv√°l√≥', icon: '‚ú®', color: '#22c55e', category: 'excellent' },
        { min: 80, label: 'Nagyon j√≥', icon: 'üåø', color: '#84cc16', category: 'very-good' },
        { min: 70, label: 'J√≥', icon: 'üëç', color: '#10b981', category: 'good' },
        { min: 60, label: 'Megfelel≈ë', icon: 'üÜó', color: '#eab308', category: 'acceptable' },
        { min: 50, label: 'K√∂zepes', icon: '‚ö†Ô∏è', color: '#f59e0b', category: 'average' },
        { min: 40, label: 'Gyenge', icon: 'üìâ', color: '#f97316', category: 'poor' },
        { min: 0, label: 'Rossz', icon: '‚ùå', color: '#ef4444', category: 'bad' }
    ];
    
    for (const category of categories) {
        if (sustainabilityIndex >= category.min) {
            return {
                label: category.label,
                icon: category.icon,
                color: category.color,
                category: category.category
            };
        }
    }
    
    // Fallback
    return {
        label: 'Rossz',
        icon: '‚ùå',
        color: '#ef4444',
        category: 'bad'
    };
}

/**
 * Kateg√≥ria meghat√°roz√°sa hozz√°val√≥k alapj√°n
 * 
 * @param {string} ingredients - Hozz√°val√≥k string
 * @returns {string} Kateg√≥ria
 */
export function determineCategory(ingredients) {
    if (!ingredients || typeof ingredients !== 'string') {
        return 'egy√©b';
    }
    
    const lowerIngredients = ingredients.toLowerCase();
    
    // Kateg√≥ria kulcsszavak
    const categoryKeywords = {
        'sal√°ta': ['sal√°ta', 'uborka', 'paradicsom', 'paprika', 'hagyma', 'ol√≠va', 'salad'],
        'leves': ['leves', 'soup', 'kr√©m', 'brokkoli', 's√°rgar√©pa', 'zeller'],
        'f≈ë√©tel': ['h√∫s', 'csirke', 'marha', 'sert√©s', 'hal', 'pasta', 'rizs', 'burgonya'],
        'desszert': ['s√ºtem√©ny', 'torta', 'csokol√°d√©', 'van√≠lia', 'cukor', 'tejsz√≠n', 'gy√ºm√∂lcs'],
        'ital': ['smoothie', 'juice', 'tea', 'k√°v√©', 'v√≠z', 'tej', 'drink'],
        'reggeli': ['toj√°s', 'bacon', 'sonka', 'sajt', 'toast', 'm√ºzli', 'joghurt'],
        'k√∂ret': ['krumpli', 'burgonya', 'rizs', 'pasta', 'z√∂lds√©g', 'bab', 'lencse']
    };
    
    // Pontsz√°mok sz√°m√≠t√°sa kateg√≥ri√°nk√©nt
    const scores = {};
    for (const [category, keywords] of Object.entries(categoryKeywords)) {
        scores[category] = keywords.reduce((score, keyword) => {
            return score + (lowerIngredients.includes(keyword) ? 1 : 0);
        }, 0);
    }
    
    // Legnagyobb pontsz√°m√∫ kateg√≥ria keres√©se
    const bestCategory = Object.entries(scores).reduce((best, [category, score]) => {
        return score > best.score ? { category, score } : best;
    }, { category: 'egy√©b', score: 0 });
    
    return bestCategory.score > 0 ? bestCategory.category : 'egy√©b';
}

/**
 * Kateg√≥ria ikon lek√©r√©se
 * 
 * @param {string} category - Kateg√≥ria
 * @returns {string} Emoji ikon
 */
export function getCategoryIcon(category) {
    return CONFIG.CATEGORY_ICONS?.[category] || CONFIG.CATEGORY_ICONS?.['egy√©b'] || 'üç¥';
}

/**
 * Hozz√°val√≥ fenntarthat√≥s√°gi hat√°sa
 * 
 * @param {string} ingredient - Hozz√°val√≥ neve
 * @returns {Object} Hat√°s inform√°ci√≥
 */
export function getIngredientSustainabilityImpact(ingredient) {
    if (!ingredient || typeof ingredient !== 'string') {
        return { impact: 'neutral', score: 0, explanation: 'Ismeretlen hozz√°val√≥' };
    }
    
    const lowerIngredient = ingredient.toLowerCase().trim();
    
    // Fenntarthat√≥s√°gi adatb√°zis
    const sustainabilityData = {
        // Nagyon j√≥ (alacsony k√∂rnyezeti hat√°s)
        'sal√°ta': { impact: 'positive', score: 8, explanation: 'Alacsony sz√©n-dioxid kibocs√°t√°s √©s v√≠zig√©ny' },
        'paradicsom': { impact: 'positive', score: 7, explanation: 'Helyi termeszt√©s eset√©n k√∂rnyezetbar√°t' },
        'uborka': { impact: 'positive', score: 8, explanation: 'Minim√°lis er≈ëforr√°s ig√©ny' },
        'spen√≥t': { impact: 'positive', score: 9, explanation: 'Magas t√°p√©rt√©k, alacsony k√∂rnyezeti hat√°s' },
        'brokkoli': { impact: 'positive', score: 8, explanation: 'Kiv√°l√≥ t√°p√©rt√©k, alacsony sz√©n-l√°bnyom' },
        's√°rgar√©pa': { impact: 'positive', score: 8, explanation: 'Hossz√∫ t√°rolhat√≥s√°g, alacsony hullad√©k' },
        'z√∂lds√©g': { impact: 'positive', score: 7, explanation: '√Åltal√°ban k√∂rnyezetbar√°t' },
        'gy√ºm√∂lcs': { impact: 'positive', score: 7, explanation: 'Term√©szetes, minim√°lisan feldolgozott' },
        'bab': { impact: 'positive', score: 9, explanation: 'Magas feh√©rjetartalom, nitrog√©n fix√°l√°s' },
        'lencse': { impact: 'positive', score: 9, explanation: 'Fenntarthat√≥ feh√©rjeforr√°s' },
        'quinoa': { impact: 'positive', score: 8, explanation: 'Teljes feh√©rje, alacsony v√≠zig√©ny' },
        
        // J√≥ (m√©rs√©kelt hat√°s)
        'rizs': { impact: 'neutral', score: 5, explanation: 'M√©rs√©kelt k√∂rnyezeti hat√°s' },
        'pasta': { impact: 'neutral', score: 5, explanation: 'Gabona alap√∫, k√∂zepes fenntarthat√≥s√°g' },
        'krumpli': { impact: 'neutral', score: 6, explanation: 'J√≥ t√°p√©rt√©k, k√∂zepes er≈ëforr√°s ig√©ny' },
        'burgonya': { impact: 'neutral', score: 6, explanation: 'J√≥ t√°p√©rt√©k, k√∂zepes er≈ëforr√°s ig√©ny' },
        'toj√°s': { impact: 'neutral', score: 4, explanation: 'J√≥ feh√©rje, de √°llatteny√©szt√©s hat√°sa' },
        'tej': { impact: 'neutral', score: 3, explanation: 'T√°pl√°l√≥, de tejterm√©k k√∂rnyezeti hat√°s' },
        'sajt': { impact: 'neutral', score: 3, explanation: 'Magas t√°p√©rt√©k, de jelent≈ës k√∂rnyezeti hat√°s' },
        'hal': { impact: 'neutral', score: 4, explanation: 'J√≥ feh√©rje, de t√∫lhal√°szat kock√°zat' },
        
        // Rossz (magas k√∂rnyezeti hat√°s)
        'csirke': { impact: 'negative', score: -2, explanation: '√Ållatteny√©szt√©s k√∂rnyezeti hat√°sa' },
        'csirkemell': { impact: 'negative', score: -2, explanation: '√Ållatteny√©szt√©s k√∂rnyezeti hat√°sa' },
        'sert√©s': { impact: 'negative', score: -4, explanation: 'Magas sz√©n-dioxid kibocs√°t√°s' },
        'marha': { impact: 'negative', score: -6, explanation: 'Nagyon magas k√∂rnyezeti hat√°s' },
        'marhah√∫s': { impact: 'negative', score: -6, explanation: 'Nagyon magas k√∂rnyezeti hat√°s' },
        'bacon': { impact: 'negative', score: -5, explanation: 'Feldolgozott h√∫s, magas k√∂rnyezeti hat√°s' },
        'sonka': { impact: 'negative', score: -4, explanation: 'Feldolgozott h√∫s' },
        'vaj': { impact: 'negative', score: -3, explanation: 'Tejterm√©k, magas sz√©n-l√°bnyom' },
        'tejsz√≠n': { impact: 'negative', score: -3, explanation: 'Magas zs√≠rtartalm√∫ tejterm√©k' }
    };
    
    // Pontos egyez√©s keres√©se
    if (sustainabilityData[lowerIngredient]) {
        return sustainabilityData[lowerIngredient];
    }
    
    // R√©szleges egyez√©s keres√©se
    for (const [key, data] of Object.entries(sustainabilityData)) {
        if (lowerIngredient.includes(key) || key.includes(lowerIngredient)) {
            return data;
        }
    }
    
    // Alap√©rtelmezett neutral
    return { impact: 'neutral', score: 0, explanation: 'Ismeretlen fenntarthat√≥s√°gi hat√°s' };
}

/**
 * Recept fenntarthat√≥s√°gi elemz√©se
 * 
 * @param {Object} recipe - Recept objektum
 * @returns {Object} R√©szletes elemz√©s
 */
export function analyzeSustainability(recipe) {
    if (!recipe || !recipe.ingredients) {
        return {
            overallScore: 50,
            analysis: 'Nincs elegend≈ë adat az elemz√©shez',
            ingredients: [],
            recommendations: []
        };
    }
    
    // Hozz√°val√≥k feldolgoz√°sa
    const ingredients = recipe.ingredients
        .toLowerCase()
        .replace(/^c\(|\)$/g, '') // R lista form√°tum elt√°vol√≠t√°sa
        .replace(/["']/g, '')     // Id√©z≈ëjelek elt√°vol√≠t√°sa
        .split(',')
        .map(ingredient => ingredient.trim())
        .filter(ingredient => ingredient.length > 0);
    
    // Hozz√°val√≥k elemz√©se
    const ingredientAnalysis = ingredients.map(ingredient => ({
        name: ingredient,
        ...getIngredientSustainabilityImpact(ingredient)
    }));
    
    // √Åtlagos hat√°s sz√°m√≠t√°sa
    const totalScore = ingredientAnalysis.reduce((sum, item) => sum + item.score, 0);
    const avgScore = ingredients.length > 0 ? totalScore / ingredients.length : 0;
    
    // Sk√°l√°z√°s 0-100 tartom√°nyra
    const scaledScore = Math.max(0, Math.min(100, 50 + (avgScore * 5)));
    
    // Javaslatok gener√°l√°sa
    const recommendations = generateSustainabilityRecommendations(ingredientAnalysis);
    
    return {
        overallScore: Math.round(scaledScore * 10) / 10,
        analysis: generateAnalysisText(ingredientAnalysis, scaledScore),
        ingredients: ingredientAnalysis,
        recommendations
    };
}

/**
 * Fenntarthat√≥s√°gi javaslatok gener√°l√°sa
 * 
 * @param {Array} ingredientAnalysis - Hozz√°val√≥k elemz√©se
 * @returns {Array} Javaslatok list√°ja
 */
function generateSustainabilityRecommendations(ingredientAnalysis) {
    const recommendations = [];
    
    // Negat√≠v hat√°s√∫ hozz√°val√≥k keres√©se
    const negativeIngredients = ingredientAnalysis.filter(item => item.impact === 'negative');
    
    if (negativeIngredients.length > 0) {
        recommendations.push('Pr√≥b√°lja cs√∂kkenteni a h√∫sfogyaszt√°st a k√∂rnyezeti hat√°s m√©rs√©kl√©se √©rdek√©ben.');
    }
    
    // Pozit√≠v hozz√°val√≥k ar√°ny√°nak n√∂vel√©se
    const positiveIngredients = ingredientAnalysis.filter(item => item.impact === 'positive');
    const totalIngredients = ingredientAnalysis.length;
    
    if (positiveIngredients.length / totalIngredients < 0.5) {
        recommendations.push('N√∂velje a z√∂lds√©gek √©s n√∂v√©nyi alap√∫ hozz√°val√≥k ar√°ny√°t.');
    }
    
    // Specifikus javaslatok
    if (negativeIngredients.some(item => item.name.includes('marha'))) {
        recommendations.push('A marhah√∫s helyett pr√≥b√°ljon babot vagy lencs√©t haszn√°lni.');
    }
    
    if (negativeIngredients.some(item => item.name.includes('csirke'))) {
        recommendations.push('A csirkeh√∫s helyett pr√≥b√°ljon tofut vagy tempeh-t haszn√°lni.');
    }
    
    // Ha m√°r j√≥ a recept
    if (recommendations.length === 0) {
        recommendations.push('Ez a recept m√°r j√≥ fenntarthat√≥s√°gi egyens√∫lyt mutat!');
    }
    
    return recommendations;
}

/**
 * Elemz√©si sz√∂veg gener√°l√°sa
 * 
 * @param {Array} ingredientAnalysis - Hozz√°val√≥k elemz√©se
 * @param {number} overallScore - √ñsszes√≠tett pontsz√°m
 * @returns {string} Elemz√©si sz√∂veg
 */
function generateAnalysisText(ingredientAnalysis, overallScore) {
    const positive = ingredientAnalysis.filter(item => item.impact === 'positive').length;
    const negative = ingredientAnalysis.filter(item => item.impact === 'negative').length;
    const total = ingredientAnalysis.length;
    
    let text = `Ez a recept ${overallScore.toFixed(1)}/100 fenntarthat√≥s√°gi pontot √©rt el. `;
    
    if (overallScore >= 80) {
        text += 'Kiv√°l√≥ v√°laszt√°s a k√∂rnyezet sz√°m√°ra!';
    } else if (overallScore >= 60) {
        text += 'J√≥ fenntarthat√≥s√°gi profil, n√©h√°ny jav√≠t√°si lehet≈ës√©ggel.';
    } else if (overallScore >= 40) {
        text += 'K√∂zepes fenntarthat√≥s√°g, √©rdemes lehet m√≥dos√≠t√°sokat eszk√∂z√∂lni.';
    } else {
        text += 'A fenntarthat√≥s√°g jav√≠that√≥ lenne n√©h√°ny hozz√°val√≥ cser√©j√©vel.';
    }
    
    text += ` A recept ${positive} k√∂rnyezetbar√°t √©s ${negative} magas k√∂rnyezeti hat√°s√∫ hozz√°val√≥t tartalmaz.`;
    
    return text;
}

/**
 * Szezon√°lis pontsz√°m m√≥dos√≠t√≥
 * 
 * @param {string} ingredient - Hozz√°val√≥
 * @param {Date} date - D√°tum (alap√©rtelmezett: ma)
 * @returns {number} Szezon√°lis m√≥dos√≠t√≥ (-2 - +2)
 */
export function getSeasonalModifier(ingredient, date = new Date()) {
    const month = date.getMonth() + 1; // 1-12
    const lowerIngredient = ingredient.toLowerCase();
    
    const seasonalData = {
        // Tavaszi (m√°rcius-m√°jus): 3,4,5
        'sp√°rga': { peak: [3, 4, 5], modifier: 2 },
        'retek': { peak: [3, 4, 5], modifier: 1 },
        'sal√°ta': { peak: [3, 4, 5, 6], modifier: 1 },
        
        // Ny√°ri (j√∫nius-augusztus): 6,7,8  
        'paradicsom': { peak: [6, 7, 8], modifier: 2 },
        'paprika': { peak: [6, 7, 8], modifier: 2 },
        'uborka': { peak: [6, 7, 8], modifier: 2 },
        'cukkini': { peak: [6, 7, 8], modifier: 2 },
        
        // ≈êszi (szeptember-november): 9,10,11
        't√∂k': { peak: [9, 10, 11], modifier: 2 },
        'alma': { peak: [9, 10, 11], modifier: 2 },
        'sz≈ël≈ë': { peak: [9, 10], modifier: 2 },
        
        // T√©li (december-febru√°r): 12,1,2
        'k√°poszta': { peak: [12, 1, 2], modifier: 2 },
        'r√©pa': { peak: [12, 1, 2], modifier: 1 },
        'krumpli': { peak: [9, 10, 11, 12], modifier: 1 }
    };
    
    for (const [key, data] of Object.entries(seasonalData)) {
        if (lowerIngredient.includes(key)) {
            return data.peak.includes(month) ? data.modifier : -1;
        }
    }
    
    return 0; // Semleges, ha nincs szezon√°lis adat
}
