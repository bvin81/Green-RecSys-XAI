/**
 * data-loader.js
 * Adatok bet√∂lt√©se √©s el≈ëk√©sz√≠t√©se a Recept Kutat√°si Rendszerhez
 * Verzi√≥: 2025.06.20
 */

import CONFIG from './config.js';
import { calculateSustainabilityScore, determineCategory, getCategoryIcon } from './sustainability.js';
import { safeJsonParse } from '../utils/helpers.js';

/**
 * Recept adatok bet√∂lt√©se
 * 
 * @returns {Promise<Array>} Bet√∂lt√∂tt receptek t√∂mbje
 */
export async function loadRecipeData() {
    console.log('üìã Recept adatok bet√∂lt√©se...');
    
    // ‚úÖ Adatforr√°s ellen≈ërz√©se √©s fallback
    let dataSource = CONFIG.DATA_SOURCE;
    if (!dataSource) {
        console.warn('‚ö†Ô∏è CONFIG.DATA_SOURCE √ºres, alap√©rtelmezett haszn√°lata');
        dataSource = './data/recipes_hungarian_best1000.json';
    }
    
    console.log('üìÅ Adatforr√°s URL:', dataSource);
    
    try {
        const response = await fetch(dataSource);
        
        if (response.ok) {
            const recipes = await response.json();
            console.log('‚úÖ Receptek sikeresen bet√∂ltve:', recipes.length, 'recept');
            return recipes;
        } else {
            throw new Error(`HTTP ${response.status}: Receptek nem el√©rhet≈ëk`);
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è Receptek bet√∂lt√©se sikertelen:', error.message);
        console.log('üîÑ Fallback adatok haszn√°lata...');
        return loadFallbackData();
    }
}

/**
 * Fallback adatok bet√∂lt√©se hiba eset√©n
 * 
 * @returns {Array} Alap√©rtelmezett receptek
 */
function loadFallbackData() {
    // B≈ëvebb fallback adatok tesztel√©shez
    return [
        {
            recipeid: 1,
            name: "Egyszer≈± paradicsomleves",
            ingredients: "paradicsom, hagyma, s√≥, bors, fokhagyma",
            category: "leves",
            env_score: 25.5,
            nutri_score: 78.2,
            sustainability_index: 70,
            instructions: "A hagym√°t apr√≥ra v√°gjuk √©s olajon megdinsztelj√ºk. Hozz√°adjuk a paradicsomot √©s a f≈±szereket. 20 percig f≈ëzz√ºk."
        },
        {
            recipeid: 2,
            name: "Csirkemell rizibizivel",
            ingredients: "csirkemell, rizs, bors√≥, s√°rgar√©pa, s√≥, bors",
            category: "f≈ë√©tel",
            env_score: 58.3,
            nutri_score: 65.1,
            sustainability_index: 45,
            instructions: "A csirkemellet megs√ºtj√ºk, a rizst megf≈ëzz√ºk. A z√∂lds√©geket p√°rolunk √©s √∂sszekeverj√ºk."
        },
        {
            recipeid: 3,
            name: "Uborkasal√°ta",
            ingredients: "uborka, tejf√∂l, kapor, s√≥, bors, cukor",
            category: "sal√°ta",
            env_score: 15.2,
            nutri_score: 72.8,
            sustainability_index: 85,
            instructions: "Az ubork√°t felszeletelj√ºk, megs√≥zzuk. A tejf√∂lt √∂sszekeverj√ºk a f≈±szerekkel."
        },
        {
            recipeid: 4,
            name: "Spen√≥tos lasagne",
            ingredients: "lasagne t√©szta, spen√≥t, ricotta, mozzarella, paradicsom sz√≥sz, fokhagyma, hagyma",
            category: "f≈ë√©tel",
            env_score: 42.1,
            nutri_score: 70.5,
            sustainability_index: 62,
            instructions: "A spen√≥tot √∂sszekeverj√ºk a ricott√°val. R√©tegesen √∂sszerakjuk a t√©szt√°val √©s sz√≥sszal. 180¬∞C-on 45 percig s√ºtj√ºk."
        },
        {
            recipeid: 5,
            name: "Gy√ºm√∂lcssal√°ta",
            ingredients: "alma, ban√°n, narancs, sz≈ël≈ë, citroml√©, m√©z",
            category: "desszert",
            env_score: 12.8,
            nutri_score: 85.3,
            sustainability_index: 92,
            instructions: "A gy√ºm√∂lcs√∂ket felkock√°zzuk, citroml√©vel lelocsoljuk. M√©zzel √©des√≠tj√ºk."
        },
        {
            recipeid: 6,
            name: "Z√∂ld smoothie",
            ingredients: "spen√≥t, ban√°n, alma, gy√∂mb√©r, v√≠z, citroml√©",
            category: "ital",
            env_score: 8.5,
            nutri_score: 88.7,
            sustainability_index: 95,
            instructions: "Minden hozz√°val√≥t turmixg√©pbe tesz√ºnk √©s sim√°ra turmixoljuk."
        },
        {
            recipeid: 7,
            name: "Marhap√∂rk√∂lt",
            ingredients: "marha, hagyma, paprika, paradicsom, s√≥, bors, bab√©rlev√©l",
            category: "f≈ë√©tel",
            env_score: 75.2,
            nutri_score: 58.1,
            sustainability_index: 25,
            instructions: "A h√∫st felkock√°zzuk, a hagym√°t megpir√≠tjuk. Hozz√°adjuk a h√∫st √©s a f≈±szereket. 2 √≥r√°n √°t p√°roljuk."
        },
        {
            recipeid: 8,
            name: "Veg√°n burger",
            ingredients: "fekete bab, quinoa, hagyma, fokhagyma, petrezselyem, zabpehely, zsemlemorzsa",
            category: "f≈ë√©tel",
            env_score: 18.3,
            nutri_score: 76.9,
            sustainability_index: 88,
            instructions: "A babot √∂sszet√∂rj√ºk, √∂sszekeverj√ºk a t√∂bbi hozz√°val√≥val. Pog√°cs√°kat form√°zunk √©s megs√ºtj√ºk."
        }
    ];
}

/**
 * Receptek el≈ëk√©sz√≠t√©se a haszn√°latra
 * 
 * @param {Array} rawRecipes - Nyers recept adatok
 * @returns {Array} El≈ëk√©sz√≠tett receptek
 */
export function prepareRecipes(rawRecipes) {
    console.log('‚öôÔ∏è Receptek el≈ëk√©sz√≠t√©se...');
    
    if (!Array.isArray(rawRecipes)) {
        console.error('‚ùå Hib√°s recept adat form√°tum!');
        return [];
    }
    
    const preparedRecipes = rawRecipes.map(recipe => {
        try {
            return prepareRecipe(recipe);
        } catch (error) {
            console.warn(`‚ö†Ô∏è Recept el≈ëk√©sz√≠t√©si hiba (${recipe.recipeid}):`, error);
            return null;
        }
    }).filter(recipe => recipe !== null);
    
    console.log('‚úÖ Receptek el≈ëk√©sz√≠tve:', preparedRecipes.length, '√©rv√©nyes recept');
    return preparedRecipes;
}

/**
 * Egyetlen recept el≈ëk√©sz√≠t√©se
 * 
 * @param {Object} rawRecipe - Nyers recept adat
 * @returns {Object} El≈ëk√©sz√≠tett recept
 */
function prepareRecipe(rawRecipe) {
    // Alap√©rtelmezett √©rt√©kek be√°ll√≠t√°sa
    const recipe = {
        recipeid: rawRecipe.recipeid || 0,
        name: rawRecipe.name || 'N√©vtelen recept',
        ingredients: rawRecipe.ingredients || '',
        category: rawRecipe.category || 'egy√©b',
        env_score: parseFloat(rawRecipe.env_score) || 50,
        nutri_score: parseFloat(rawRecipe.nutri_score) || 50,
        sustainability_index: parseFloat(rawRecipe.sustainability_index) || 50,
        instructions: rawRecipe.instructions || 'Nincs el√©rhet≈ë √∫tmutat√≥.'
    };
    
    // Kateg√≥ria normaliz√°l√°sa √©s ikon hozz√°ad√°sa
    recipe.category = normalizeCategory(recipe.category);
    recipe.categoryIcon = getCategoryIcon(recipe.category);
    
    // Hi√°nyz√≥ fenntarthat√≥s√°gi pontsz√°m sz√°m√≠t√°sa
    if (!rawRecipe.sustainability_index && rawRecipe.env_score && rawRecipe.nutri_score) {
        recipe.sustainability_index = calculateSustainabilityScore(
            recipe.env_score, 
            recipe.nutri_score, 
            recipe.category
        );
    }
    
    // Valid√°ci√≥
    validateRecipe(recipe);
    
    return recipe;
}

/**
 * Kateg√≥ria normaliz√°l√°sa
 * 
 * @param {string} category - Eredeti kateg√≥ria
 * @returns {string} Normaliz√°lt kateg√≥ria
 */
function normalizeCategory(category) {
    if (!category || typeof category !== 'string') {
        return 'egy√©b';
    }
    
    const normalized = category.toLowerCase().trim();
    
    // Kateg√≥ria mapping
    const categoryMap = {
        'soup': 'leves',
        'salad': 'sal√°ta',
        'main': 'f≈ë√©tel',
        'main_course': 'f≈ë√©tel',
        'dessert': 'desszert',
        'drink': 'ital',
        'beverage': 'ital',
        'breakfast': 'reggeli',
        'side': 'k√∂ret',
        'side_dish': 'k√∂ret',
        'appetizer': 'el≈ë√©tel',
        'snack': 'snack'
    };
    
    return categoryMap[normalized] || normalized;
}

/**
 * Recept valid√°ci√≥
 * 
 * @param {Object} recipe - Recept objektum
 * @throws {Error} Valid√°ci√≥s hiba eset√©n
 */
function validateRecipe(recipe) {
    if (!recipe.recipeid || recipe.recipeid <= 0) {
        throw new Error('√ârv√©nytelen recept ID');
    }
    
    if (!recipe.name || recipe.name.trim().length === 0) {
        throw new Error('Hi√°nyz√≥ recept n√©v');
    }
    
    if (!recipe.ingredients || recipe.ingredients.trim().length === 0) {
        throw new Error('Hi√°nyz√≥ hozz√°val√≥k');
    }
    
    // Pontsz√°mok ellen≈ërz√©se
    if (recipe.env_score < 0 || recipe.env_score > 100) {
        console.warn(`‚ö†Ô∏è K√∂rnyezeti pontsz√°m k√≠v√ºl esik a tartom√°nyon: ${recipe.env_score}`);
        recipe.env_score = Math.max(0, Math.min(100, recipe.env_score));
    }
    
    if (recipe.nutri_score < 0 || recipe.nutri_score > 100) {
        console.warn(`‚ö†Ô∏è T√°pl√°lkoz√°si pontsz√°m k√≠v√ºl esik a tartom√°nyon: ${recipe.nutri_score}`);
        recipe.nutri_score = Math.max(0, Math.min(100, recipe.nutri_score));
    }
    
    if (recipe.sustainability_index < 0 || recipe.sustainability_index > 100) {
        console.warn(`‚ö†Ô∏è Fenntarthat√≥s√°gi index k√≠v√ºl esik a tartom√°nyon: ${recipe.sustainability_index}`);
        recipe.sustainability_index = Math.max(0, Math.min(100, recipe.sustainability_index));
    }
}

/**
 * Receptek sz≈±r√©se krit√©riumok alapj√°n
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @param {Object} criteria - Sz≈±r√©si krit√©riumok
 * @returns {Array} Sz≈±rt receptek
 */
export function filterRecipes(recipes, criteria = {}) {
    if (!Array.isArray(recipes)) {
        return [];
    }
    
    return recipes.filter(recipe => {
        // Kateg√≥ria sz≈±r√©s
        if (criteria.category && recipe.category !== criteria.category) {
            return false;
        }
        
        // Fenntarthat√≥s√°gi minimum
        if (criteria.minSustainability && recipe.sustainability_index < criteria.minSustainability) {
            return false;
        }
        
        // K√∂rnyezeti maximum
        if (criteria.maxEnvScore && recipe.env_score > criteria.maxEnvScore) {
            return false;
        }
        
        // T√°pl√°lkoz√°si minimum
        if (criteria.minNutriScore && recipe.nutri_score < criteria.minNutriScore) {
            return false;
        }
        
        // Hozz√°val√≥ kiz√°r√°s
        if (criteria.excludeIngredients && Array.isArray(criteria.excludeIngredients)) {
            const ingredients = recipe.ingredients.toLowerCase();
            for (const excluded of criteria.excludeIngredients) {
                if (ingredients.includes(excluded.toLowerCase())) {
                    return false;
                }
            }
        }
        
        return true;
    });
}

/**
 * Receptek csoportos√≠t√°sa kateg√≥ria szerint
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @returns {Object} Kateg√≥ri√°nk√©nt csoportos√≠tott receptek
 */
export function groupRecipesByCategory(recipes) {
    if (!Array.isArray(recipes)) {
        return {};
    }
    
    const grouped = {};
    
    recipes.forEach(recipe => {
        const category = recipe.category || 'egy√©b';
        if (!grouped[category]) {
            grouped[category] = [];
        }
        grouped[category].push(recipe);
    });
    
    return grouped;
}

/**
 * Recept statisztik√°k sz√°m√≠t√°sa
 * 
 * @param {Array} recipes - Receptek t√∂mbje
 * @returns {Object} Statisztikai adatok
 */
export function calculateRecipeStats(recipes) {
    if (!Array.isArray(recipes) || recipes.length === 0) {
        return {
            total: 0,
            avgSustainability: 0,
            avgEnvScore: 0,
            avgNutriScore: 0,
            categoryDistribution: {}
        };
    }
    
    const total = recipes.length;
    
    const avgSustainability = recipes.reduce((sum, recipe) => 
        sum + (recipe.sustainability_index || 0), 0) / total;
    
    const avgEnvScore = recipes.reduce((sum, recipe) => 
        sum + (recipe.env_score || 0), 0) / total;
    
    const avgNutriScore = recipes.reduce((sum, recipe) => 
        sum + (recipe.nutri_score || 0), 0) / total;
    
    const categoryDistribution = {};
    recipes.forEach(recipe => {
        const category = recipe.category || 'egy√©b';
        categoryDistribution[category] = (categoryDistribution[category] || 0) + 1;
    });
    
    return {
        total,
        avgSustainability: Math.round(avgSustainability * 10) / 10,
        avgEnvScore: Math.round(avgEnvScore * 10) / 10,
        avgNutriScore: Math.round(avgNutriScore * 10) / 10,
        categoryDistribution
    };
}
