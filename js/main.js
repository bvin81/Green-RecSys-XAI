/**
 * main.js
 * F≈ë alkalmaz√°s modul az Eco-Score Recept Kutat√≥ Rendszerhez
 * Verzi√≥: 2025.06.20
 */

import CONFIG from './modules/config.js';
import { loadRecipeData, prepareRecipes } from './modules/data-loader.js';
import { searchRecipes } from './modules/recipe-search.js';
import { 
    checkExistingUser, 
    registerUser, 
    recordUserChoice,
    getTestGroupDescription,
    loginUser,
    exportUserData
} from './modules/user-manager.js';
import { 
    generateSearchResults, 
    generateUserInfo, 
    generateRecipeDetailsModal,
    generateSelectionConfirmation,
    generateAndDisplayXAI
} from './modules/ui-components.js';
import { getUserChoiceStats } from './modules/analytics.js';

/**
 * Eco-Score Recept Kutat√≥ Rendszer alkalmaz√°s
 */
class EcoScoreRecipeApp {
    /**
     * Konstruktor
     */
    constructor() {
        this.recipes = [];
        this.currentUser = null;
        this.testGroup = null;
        this.searchStartTime = null;
        this.currentRecipeDetails = null;
        this.abortController = new AbortController();
        
        // Alkalmaz√°s inicializ√°l√°sa async m√≥don
        this.initializeApp().catch(error => {
            console.error('‚ùå Alkalmaz√°s inicializ√°l√°si hiba:', error);
            this.showError('Az alkalmaz√°s ind√≠t√°sa sikertelen. K√©rj√ºk, t√∂ltse √∫jra az oldalt.');
        });
    }
    
    /**
     * Alkalmaz√°s inicializ√°l√°sa
     */
    async initializeApp() {
        console.log(`üöÄ ${CONFIG.APP_NAME} - ${CONFIG.VERSION} verzi√≥ ind√≠t√°sa...`);
        
        try {
            // ‚úÖ CONFIG inicializ√°l√°sa a k√∂rnyezeti v√°ltoz√≥kkal
            if (CONFIG.XAI && typeof CONFIG.XAI.init === 'function') {
                CONFIG.XAI.init();
            }
            
            // ‚úÖ DEBUG: CONFIG √°llapot ellen≈ërz√©se
            console.log('üîß CONFIG √°llapot:', {
                DATA_SOURCE: CONFIG.DATA_SOURCE,
                hasDataSource: !!CONFIG.DATA_SOURCE,
                configKeys: Object.keys(CONFIG)
            });
            
            // Adatok bet√∂lt√©se
            const rawData = await loadRecipeData();
            this.recipes = prepareRecipes(rawData);
            
            // Event listenerek be√°ll√≠t√°sa
            this.setupEventListeners();
            
            // Felhaszn√°l√≥ ellen≈ërz√©se
            this.checkExistingUser();
            
            console.log('‚úÖ Alkalmaz√°s inicializ√°l√°sa k√©sz!');
            console.log(`üìä Bet√∂lt√∂tt receptek: ${this.recipes.length}`);
        } catch (error) {
            console.error('‚ùå Alkalmaz√°s inicializ√°l√°si hiba:', error);
            this.showError('Az alkalmaz√°s ind√≠t√°sa sikertelen. K√©rj√ºk, t√∂ltse √∫jra az oldalt.');
        }
    }
    
    /**
     * Event listenerek be√°ll√≠t√°sa
     */
    setupEventListeners() {
        const signal = this.abortController.signal;
        
        // Regisztr√°ci√≥s form
        const registrationForm = document.getElementById('registration-form');
        if (registrationForm) {
            registrationForm.addEventListener('submit', this.handleRegistration.bind(this), { signal });
        }
        
        // Keres√©s gomb
        const searchBtn = document.getElementById('search-btn');
        if (searchBtn) {
            searchBtn.addEventListener('click', this.handleSearch.bind(this), { signal });
        }
        
        // Keres√©si input - Enter billenty≈±
        const searchInput = document.getElementById('ingredient-search');
        if (searchInput) {
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.handleSearch();
                }
            }, { signal });
        }
        
        // Glob√°lis click handler
        document.addEventListener('click', this.handleClick.bind(this), { signal });
        
        // √öj keres√©s gomb
        const newSearchBtn = document.getElementById('new-search-btn');
        if (newSearchBtn) {
            newSearchBtn.addEventListener('click', this.startNewSearch.bind(this), { signal });
        }
        
        // Statisztik√°k gomb
        const viewStatsBtn = document.getElementById('view-stats-btn');
        if (viewStatsBtn) {
            viewStatsBtn.addEventListener('click', this.showStats.bind(this), { signal });
        }
        
        // Vissza a keres√©shez gomb
        const backToSearchBtn = document.getElementById('back-to-search-btn');
        if (backToSearchBtn) {
            backToSearchBtn.addEventListener('click', this.backToSearch.bind(this), { signal });
        }
        
        // Adatok export√°l√°sa gomb
        const exportDataBtn = document.getElementById('export-data-btn');
        if (exportDataBtn) {
            exportDataBtn.addEventListener('click', this.exportData.bind(this), { signal });
        }
        
        console.log('‚úÖ Event listenerek be√°ll√≠tva');
    }
    
    /**
     * Glob√°lis click handler
     * 
     * @param {Event} event - Click esem√©ny
     */
    handleClick(event) {
        const target = event.target;
        
        // Recept kiv√°laszt√°s
        if (target.classList.contains('select-recipe-btn')) {
            event.preventDefault();
            const recipeId = target.dataset.recipeId;
            const recipeName = target.dataset.recipeName;
            const rank = parseInt(target.dataset.rank);
            const searchIngredients = target.dataset.searchIngredients;
            this.selectRecipe(recipeId, recipeName, rank, searchIngredients, 'search');
        }
        
        // Recept r√©szletek
        if (target.classList.contains('recipe-details-btn')) {
            event.preventDefault();
            const recipeId = target.dataset.recipeId;
            this.showRecipeDetails(recipeId);
        }
        
        // Modal bez√°r√°s
        if (target.classList.contains('modal-close') || target.classList.contains('modal-backdrop')) {
            event.preventDefault();
            this.closeModal();
        }
        
        // Recept kiv√°laszt√°s modal-b√≥l
        if (target.classList.contains('select-from-modal-btn')) {
            event.preventDefault();
            const recipeId = target.dataset.recipeId;
            const recipeName = target.dataset.recipeName;
            const searchIngredients = target.dataset.searchIngredients;
            this.selectRecipe(recipeId, recipeName, 0, searchIngredients, 'details');
        }
        
        // Alternat√≠v javaslatok
        if (target.classList.contains('btn-alternative-suggestions')) {
            event.preventDefault();
            const recipeId = target.dataset.recipeId;
            this.showAlternatives(recipeId);
        }
    }
    
    /**
     * Regisztr√°ci√≥ kezel√©se
     * 
     * @param {Event} event - Submit esem√©ny
     */
    handleRegistration(event) {
        event.preventDefault();
        
        const formData = new FormData(event.target);
        const email = formData.get('email');
        
        try {
            this.currentUser = registerUser(email);
            this.testGroup = this.currentUser.testGroup;
            
            // Felhaszn√°l√≥i interf√©sz friss√≠t√©se
            this.updateUserInterface();
            
            // Keres√©si szakaszra v√°lt√°s
            this.showSection('search-section');
            
        } catch (error) {
            console.error('‚ùå Regisztr√°ci√≥s hiba:', error);
            this.showError('Regisztr√°ci√≥ sikertelen: ' + error.message);
        }
    }
    
    /**
     * Megl√©v≈ë felhaszn√°l√≥ ellen≈ërz√©se
     */
    checkExistingUser() {
        const existingUser = checkExistingUser();
        
        if (existingUser) {
            this.currentUser = loginUser(existingUser);
            this.testGroup = this.currentUser.testGroup;
            
            // Felhaszn√°l√≥i interf√©sz friss√≠t√©se
            this.updateUserInterface();
            
            // Keres√©si szakaszra v√°lt√°s
            this.showSection('search-section');
        } else {
            // Regisztr√°ci√≥s szakasz megjelen√≠t√©se
            this.showSection('registration-section');
        }
    }
    
    /**
     * Felhaszn√°l√≥i interf√©sz friss√≠t√©se
     */
    updateUserInterface() {
        // Felhaszn√°l√≥i inform√°ci√≥k megjelen√≠t√©se
        const userInfoContainer = document.querySelector('.user-info');
        if (userInfoContainer && this.currentUser) {
            userInfoContainer.innerHTML = generateUserInfo(this.currentUser);
        }
        
        console.log(`üë§ Felhaszn√°l√≥: ${this.currentUser.email} (${this.currentUser.testGroup} csoport)`);
    }
    
    /**
     * Szakasz megjelen√≠t√©se
     * 
     * @param {string} sectionId - Megjelen√≠tend≈ë szakasz ID
     */
    showSection(sectionId) {
        // √ñsszes szakasz elrejt√©se
        const sections = document.querySelectorAll('.section');
        sections.forEach(section => section.classList.add('hidden'));
        
        // Kiv√°lasztott szakasz megjelen√≠t√©se
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.remove('hidden');
        }
        
        console.log(`üîÑ Szakasz v√°lt√°s: ${sectionId}`);
    }
    
    /**
     * Keres√©s kezel√©se
     */
    handleSearch() {
        const searchInput = document.getElementById('ingredient-search');
        const ingredients = searchInput?.value?.trim();
        
        if (!ingredients) {
            this.showError('K√©rj√ºk, adjon meg legal√°bb egy hozz√°val√≥t!');
            return;
        }
        
        try {
            console.log('üîç Keres√©s ind√≠t√°sa:', ingredients);
            
            // Keres√©si id≈ë m√©r√©s kezd√©se
            this.searchStartTime = Date.now();
            
            // Receptek keres√©se
            const searchResults = searchRecipes(this.recipes, ingredients, this.testGroup);
            
            // Eredm√©nyek megjelen√≠t√©se
            this.displayResults(searchResults, ingredients);
            
        } catch (error) {
            console.error('‚ùå Keres√©si hiba:', error);
            this.showError('Keres√©si hiba t√∂rt√©nt. K√©rj√ºk, pr√≥b√°lja √∫jra!');
        }
    }
    
    /**
     * Keres√©si eredm√©nyek megjelen√≠t√©se
     * 
     * @param {Array} recipes - Tal√°lati receptek
     * @param {string} searchIngredients - Keres√©si kifejez√©s
     */
    displayResults(recipes, searchIngredients) {
        const resultsDiv = document.getElementById('search-results');
        
        if (!resultsDiv) {
            console.error('‚ùå Eredm√©nyek div nem tal√°lhat√≥');
            return;
        }
        
        resultsDiv.innerHTML = generateSearchResults(recipes, searchIngredients, this.testGroup);
        
        // Ha C csoport, akkor t√∂lts√ºk be az XAI magyar√°zatokat
        if (this.testGroup === 'C' && recipes.length > 0) {
            // K√©sleltetett bet√∂lt√©s, hogy a k√°rty√°k m√°r megjelenjenek
            setTimeout(() => {
                recipes.forEach(async (recipe) => {
                    await generateAndDisplayXAI(recipe);
                });
            }, 100);
        }
        
        console.log(`üìã ${recipes.length} recept megjelen√≠tve`);
    }
    
    /**
     * Recept kiv√°laszt√°sa
     * 
     * @param {number} recipeId - Recept azonos√≠t√≥
     * @param {string} recipeName - Recept n√©v
     * @param {number} rank - Tal√°lati lista poz√≠ci√≥
     * @param {string} searchIngredients - Keres√©si kifejez√©s
     * @param {string} source - Forr√°s (search/details/alternative/ai-recommendation)
     */
    selectRecipe(recipeId, recipeName, rank, searchIngredients, source = 'search') {
        try {
            // D√∂nt√©si id≈ë sz√°m√≠t√°sa
            const decisionTime = this.searchStartTime ? 
                Math.round((Date.now() - this.searchStartTime) / 1000) : 0;
            
            // Recept objektum keres√©se
            const recipe = this.recipes.find(r => r.recipeid == recipeId);
            if (!recipe) {
                throw new Error('A recept nem tal√°lhat√≥');
            }
            
            // V√°laszt√°s r√∂gz√≠t√©se
            const choiceData = recordUserChoice(
                this.currentUser, 
                recipe, 
                rank, 
                searchIngredients, 
                decisionTime,
                source
            );
            
            // Modal bez√°r√°sa ha nyitva van
            this.closeModal();
            
            // K√∂sz√∂n≈ëoldal megjelen√≠t√©se
            this.showSection('thank-you-section');
            
            console.log('‚úÖ Recept kiv√°lasztva:', recipeName);
            
        } catch (error) {
            console.error('‚ùå Recept kiv√°laszt√°si hiba:', error);
            this.showError('Hiba t√∂rt√©nt a recept kiv√°laszt√°sa sor√°n.');
        }
    }
    
    /**
     * Recept r√©szletek megjelen√≠t√©se mod√°lis ablakban
     * 
     * @param {number} recipeId - Recept azonos√≠t√≥
     */
    showRecipeDetails(recipeId) {
        try {
            const recipe = this.recipes.find(r => r.recipeid == recipeId);
            if (!recipe) {
                throw new Error('A recept nem tal√°lhat√≥');
            }
            
            this.currentRecipeDetails = recipe;
            
            const modalContainer = document.getElementById('modal-container');
            if (!modalContainer) {
                throw new Error('Mod√°lis kont√©ner nem tal√°lhat√≥');
            }
            
            modalContainer.innerHTML = generateRecipeDetailsModal(recipe, this.testGroup);
            modalContainer.classList.add('active');
            
            console.log('üìñ Recept r√©szletek megjelen√≠tve:', recipe.name);
            
        } catch (error) {
            console.error('‚ùå Recept r√©szletek megjelen√≠t√©si hiba:', error);
            this.showError('Hiba t√∂rt√©nt a recept r√©szletek bet√∂lt√©se sor√°n.');
        }
    }
    
    /**
     * Mod√°lis ablak bez√°r√°sa
     */
    closeModal() {
        const modalContainer = document.getElementById('modal-container');
        if (modalContainer) {
            modalContainer.classList.remove('active');
            modalContainer.innerHTML = '';
        }
        this.currentRecipeDetails = null;
        console.log('‚ùå Modal bez√°rva');
    }
    
    /**
     * √öj keres√©s ind√≠t√°sa
     */
    startNewSearch() {
        // Keres√©si mez≈ë tiszt√≠t√°sa
        const searchInput = document.getElementById('ingredient-search');
        if (searchInput) {
            searchInput.value = '';
            searchInput.focus();
        }
        
        // Eredm√©nyek t√∂rl√©se
        const resultsDiv = document.getElementById('search-results');
        if (resultsDiv) {
            resultsDiv.innerHTML = '';
        }
        
        // Keres√©si szakasz megjelen√≠t√©se
        this.showSection('search-section');
        
        // Id≈ëm√©r√©s vissza√°ll√≠t√°sa
        this.searchStartTime = null;
        
        console.log('üîÑ √öj keres√©s ind√≠tva');
    }
    
    /**
     * Statisztik√°k megjelen√≠t√©se
     */
    showStats() {
        this.showSection('stats-section');
        this.showUserStats();
    }
    
    /**
     * Vissza a keres√©shez
     */
    backToSearch() {
        this.showSection('search-section');
    }
    
    /**
     * Felhaszn√°l√≥i statisztik√°k megjelen√≠t√©se
     */
    showUserStats() {
        const statsContainer = document.getElementById('user-stats');
        if (!statsContainer) return;
        
        const stats = getUserChoiceStats(this.currentUser?.id);
        
        // Statisztik√°k HTML
        let html = `
            <div class="stats-container">
                <div class="stats-summary">
                    <div class="stat-item">
                        <div class="stat-value">${stats.totalChoices}</div>
                        <div class="stat-label">√ñsszes v√°laszt√°s</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${stats.avgSustainabilityIndex.toFixed(1)}</div>
                        <div class="stat-label">√Åtlagos Eco-Score</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">${stats.avgDecisionTime.toFixed(1)}s</div>
                        <div class="stat-label">√Åtlagos d√∂nt√©si id≈ë</div>
                    </div>
                </div>
        `;
        
        // Kateg√≥ria statisztik√°k
        if (Object.keys(stats.categoryCounts).length > 0) {
            html += `
                <div class="stats-section">
                    <h3>Kateg√≥ria v√°laszt√°sok</h3>
                    <div class="category-stats">
            `;
            
            for (const [category, count] of Object.entries(stats.categoryCounts)) {
                const percentage = ((count / stats.totalChoices) * 100).toFixed(1);
                html += `
                    <div class="category-stat-item">
                        <span class="category-name">${CONFIG.CATEGORY_ICONS[category] || 'üç¥'} ${category}</span>
                        <span class="category-count">${count} (${percentage}%)</span>
                    </div>
                `;
            }
            
            html += `
                    </div>
                </div>
            `;
        }
        
        html += `</div>`;
        statsContainer.innerHTML = html;
        
        console.log('üìä Statisztik√°k megjelen√≠tve');
    }
    
    /**
     * Adatok export√°l√°sa
     */
    exportData() {
        if (!this.currentUser) {
            this.showError('Nincs bejelentkezett felhaszn√°l√≥!');
            return;
        }
        
        try {
            const exportData = exportUserData(this.currentUser.id);
            if (!exportData) {
                throw new Error('Adatok export√°l√°sa sikertelen');
            }
            
            // JSON f√°jl let√∂lt√©se
            const dataStr = JSON.stringify(exportData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `eco-score-data-${this.currentUser.id}.json`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
            
            console.log('‚úÖ Adatok export√°lva');
            this.showSuccess('Adatok sikeresen export√°lva!');
            
        } catch (error) {
            console.error('‚ùå Export hiba:', error);
            this.showError('Hiba t√∂rt√©nt az adatok export√°l√°sa sor√°n.');
        }
    }
    
    /**
     * Alternat√≠v√°k megjelen√≠t√©se
     * 
     * @param {number} recipeId - Recept azonos√≠t√≥
     */
    showAlternatives(recipeId) {
        // Ez a funkci√≥ a ui-components.js-ben van implement√°lva
        const recipe = this.recipes.find(r => r.recipeid == recipeId);
        if (recipe) {
            console.log('üîÑ Alternat√≠v√°k megjelen√≠t√©se:', recipe.name);
            // A showAlternatives funkci√≥ megh√≠v√°sa a ui-components modulb√≥l
        }
    }
    
    /**
     * Hiba √ºzenet megjelen√≠t√©se
     * 
     * @param {string} message - Hiba √ºzenet
     */
    showError(message) {
        alert('‚ùå ' + message);
        console.error('‚ùå UI Hiba:', message);
    }
    
    /**
     * Siker √ºzenet megjelen√≠t√©se
     * 
     * @param {string} message - Siker √ºzenet
     */
    showSuccess(message) {
        // Egyszer≈± alert, de k√©s≈ëbbi fejleszt√©sben toast notification
        alert('‚úÖ ' + message);
        console.log('‚úÖ UI Siker:', message);
    }
    
    /**
     * Alkalmaz√°s takar√≠t√°sa (memory leak prevention)
     */
    destroy() {
        this.abortController.abort();
        this.recipes = null;
        this.currentUser = null;
        this.currentRecipeDetails = null;
        console.log('üßπ Alkalmaz√°s megtakar√≠tva');
    }
}

// Alkalmaz√°s ind√≠t√°sa amikor a DOM bet√∂lt≈ëd√∂tt
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåê DOM bet√∂ltve, alkalmaz√°s ind√≠t√°sa...');
    window.app = new EcoScoreRecipeApp();
});

// Takar√≠t√°s az oldal elhagy√°sakor
window.addEventListener('beforeunload', () => {
    if (window.app && typeof window.app.destroy === 'function') {
        window.app.destroy();
    }
});

// Export az alkalmaz√°s oszt√°lynak fejleszt√©shez
export default EcoScoreRecipeApp;
